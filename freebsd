/lib/libc/posix1e/acl_get.c
acl_t
acl_get_file(const char *path_p, acl_type_t type)

/sys/sys/acl.h
typedef int	acl_type_t;
/*
 * Possible valid values for acl_type_t arguments.  First two
 * are provided only for backwards binary compatibility.
 */
#define	ACL_TYPE_ACCESS_OLD	0x00000000
#define	ACL_TYPE_DEFAULT_OLD	0x00000001
#define	ACL_TYPE_ACCESS		0x00000002
#define	ACL_TYPE_DEFAULT	0x00000003
#define	ACL_TYPE_NFS4	0x00000004

typedef struct acl_t_struct *acl_t;
struct acl_t_struct {
	struct acl		ats_acl;
	int			ats_cur_entry;
	int			ats_brand;
};
struct acl {
	unsigned int		acl_maxcnt;
	unsigned int		acl_cnt;
	/* Will be required e.g. to implement NFSv4.1 ACL inheritance. */
	int			acl_spare[4];
	struct acl_entry	acl_entry[ACL_MAX_ENTRIES];
};
struct acl_entry {
	acl_tag_t		ae_tag;
	uid_t			ae_id;
	acl_perm_t		ae_perm;
	/* NFSv4 entry type, "allow" or "deny".  Unused in POSIX.1e ACLs. */
	acl_entry_type_t	ae_entry_type;
	/* NFSv4 ACL inheritance.  Unused in POSIX.1e ACLs. */
	acl_flag_t		ae_flags;
};
______________________________________________________________________________________
/sys/kern/vfs_acl.c
sys___acl_get_file(struct thread *td, struct __acl_get_file_args *uap)

kern___acl_get_path(struct thread *td, const char *path, acl_type_t type,
struct acl *aclp, int follow)

vacl_get_acl(struct thread *td, struct vnode *vp, acl_type_t type,
struct acl *aclp)
______________________________________________________________________________________
/sys/cddl/contrib/opensolaris/uts/common/fs/zfs/zfs_vnops.c
zfs_freebsd_getacl(ap)
	struct vop_getacl_args /* {
		struct vnode *vp;
		acl_type_t type;
		struct acl *aclp;
		struct ucred *cred;
		struct thread *td;
	} */ *ap;
/* zfs_freebsd_getacl sets vsecattr.vsa_mask = VSA_ACE | VSA_ACECNT
 * when calling zfs_getsecattr and passing &vsecattr. then only vsecattr.vsa_aclentp
 * is copied to ap->a_aclp
*/

zfs_getsecattr(vnode_t *vp, vsecattr_t *vsecp, int flag, cred_t *cr,
caller_context_t *ct)

/sys/cddl/contrib/opensolaris/uts/common/sys/vnode.h
typedef struct vsecattr {
	uint_t		vsa_mask;	/* See below */
	int		vsa_aclcnt;	/* ACL entry count */
	void		*vsa_aclentp;	/* pointer to ACL entries */
	int		vsa_dfaclcnt;	/* default ACL entry count */
	void		*vsa_dfaclentp;	/* pointer to default ACL entries */
	size_t		vsa_aclentsz;	/* ACE size in bytes of vsa_aclentp */
	uint_t		vsa_aclflags;	/* ACE ACL flags */
} vsecattr_t;

